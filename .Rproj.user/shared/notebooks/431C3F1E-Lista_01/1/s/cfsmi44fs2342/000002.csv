"0","```r
tauchen_P = function(grid, rho, sigma, mu) {
  N = length(grid)
  delta = (max(grid) - min(grid)) / (N-1)
  PT = matrix(NA_real_, N, N)
  for(i in 1:N) {
    for(j in 1:N) {
      if(j == 1) {
        PT[i,j] = pnorm( (grid[1] - (1-rho)*mu - rho*grid[i] + delta/2) / sigma )
      } else if(j==N) {
        PT[i,j] = 1 - pnorm( (grid[N] - (1-rho)*mu - rho*grid[i] - delta/2) / sigma )
      } else {
        PT[i,j] = 
          pnorm((grid[j] + delta/2 - (1-rho)*mu - rho*grid[i]) / sigma) -
          pnorm((grid[j] - delta/2 - (1-rho)*mu - rho*grid[i]) / sigma)
      }
    }
  }
  return(PT)
}
PT = tauchen_P(thetaT, rho, sigma, mu)
round(PT, 4)
```"
"1","        [,1]   [,2]   [,3]   [,4]   [,5]   [,6]   [,7]   [,8]   [,9]
 [1,] 0.7644 0.2347 0.0009 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000
 [2,] 0.0592 0.7405 0.1997 0.0006 0.0000 0.0000 0.0000 0.0000 0.0000
 [3,] 0.0001 0.0747 0.7569 0.1679 0.0004 0.0000 0.0000 0.0000 0.0000
 [4,] 0.0000 0.0001 0.0931 0.7669 0.1396 0.0002 0.0000 0.0000 0.0000
 [5,] 0.0000 0.0000 0.0002 0.1147 0.7702 0.1147 0.0002 0.0000 0.0000
 [6,] 0.0000 0.0000 0.0000 0.0002 0.1396 0.7669 0.0931 0.0001 0.0000
 [7,] 0.0000 0.0000 0.0000 0.0000 0.0004 0.1679 0.7569 0.0747 0.0001
 [8,] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0006 0.1997 0.7405 0.0592
 [9,] 0.0000 0.0000 0.0000 0.0000 0.0000 0.0000 0.0009 0.2347 0.7644
"
"0","```r
rowSums(PT) # Linhas da matriz devem somar 1.
```"
"1","[1] 1 1 1 1 1 1 1 1 1
"
